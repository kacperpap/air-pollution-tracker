name: CI

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev or prod)'
        required: true
        default: 'prod'

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
  REACT_APP_API_BASE_URL: http://localhost:9000/api
  ORIGIN: http://localhost:3000
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  RABBITMQ_REQUEST_QUEUE: simulation_request_queue
  RABBITMQ_URL: amqp://rabbitmq
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}     
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  BRANCH_NAME: ${{ github.event.inputs.environment == 'prod' && 'main' || 'staging' }}
  


jobs:

  verify-ecr:
    name: Verify ECR Repository
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check ECR repository
        id: check-ecr
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} &>/dev/null; then
            echo "::error::ECR repository ${{ env.ECR_REPOSITORY }} does not exist! Please create it using Terraform first."
            exit 1
          fi
          echo "ECR repository ${{ env.ECR_REPOSITORY }} exists and is ready to use."

  build-and-push:
    name: Build and Push Docker Images to ECR
    needs: verify-ecr
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ env.ENVIRONMENT }}-${{ hashFiles('**/frontend/*${{ env.ENVIRONMENT }}.Dockerfile', '**/backend/*${{ env.ENVIRONMENT }}.Dockerfile', '**/calc_module/*${{ env.ENVIRONMENT }}.Dockerfile', '**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ env.ENVIRONMENT }}-
            ${{ runner.os }}-docker-
      

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build images via docker-compose.yml
        run: |
          docker compose -f docker-compose.yml build frontend backend calc_module

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Tag and Push Frontend Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/frontend:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:frontend-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/frontend:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:frontend-${{ env.ENVIRONMENT }}-latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:frontend-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:frontend-${{ env.ENVIRONMENT }}-latest
  
      - name: Tag and Push Backend Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/backend:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/backend:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ env.ENVIRONMENT }}-latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:backend-${{ env.ENVIRONMENT }}-latest
  
      - name: Tag and Push Calc Module Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/calc_module:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:calc-module-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker tag air-pollution-tracker/${{ env.ENVIRONMENT }}/calc_module:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:calc-module-${{ env.ENVIRONMENT }}-latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:calc-module-${{ env.ENVIRONMENT }}-${IMAGE_TAG}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:calc-module-${{ env.ENVIRONMENT }}-latest
      




