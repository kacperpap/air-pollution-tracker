name: CI

on:
  push:
    branches:
      - main

env:
  ENVIRONMENT: prod
  REACT_APP_API_BASE_URL: http://localhost:9000/api
  ORIGIN: http://localhost:3000
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  RABBITMQ_REQUEST_QUEUE: simulation_request_queue
  RABBITMQ_URL: amqp://rabbitmq
  AWS_REGION: MY_AWS_REGION                   
  ECR_REPOSITORY: MY_ECR_REPOSITORY           


jobs:

  build:
    name: Build OCI images in Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ env.ENVIRONMENT }}-${{ hashFiles('**/frontend/*${{ env.ENVIRONMENT }}.Dockerfile', '**/backend/*${{ env.ENVIRONMENT }}.Dockerfile', '**/calc_module/*${{ env.ENVIRONMENT }}.Dockerfile', '**/docker-compose.yml') }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ env.ENVIRONMENT }}-
            ${{ runner.os }}-docker-
      

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build images via docker-compose.yml
        run: |
          docker compose -f docker-compose.yml build frontend backend calc_module

      - name: Save Docker images as artifacts
        run: |
          docker save air-pollution-tracker/prod/frontend:latest -o frontend.tar
          docker save air-pollution-tracker/prod/backend:latest -o backend.tar
          docker save air-pollution-tracker/prod/calc_module:latest -o calc_module.tar
  
      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            frontend.tar
            backend.tar
            calc_module.tar
          
  # integration-test:

  #   name: Run Integration Tests
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Download Images Artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: docker-images

  #   - name: Load Frontend Image
  #     run: docker load < frontend.tar

  #   - name: Load Backend Image
  #     run: docker load < backend.tar

  #   - name: Load Calc Module Image
  #     run: docker load < calc_module.tar

  #   - name: Run Integration Tests
  #     env:
  #       FAST_REFRESH: ${FAST_REFRESH}
  #       REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL}
  #       NODE_ENV: ${NODE_ENV}
  #       ORIGIN: ${ORIGIN}
  #       DATABASE_URL: ${DATABASE_URL}
  #       JWT_KEY: ${JWT_KEY}
  #       RABBITMQ_URL: ${RABBITMQ_URL}
  #       RABBITMQ_REQUEST_QUEUE: ${RABBITMQ_REQUEST_QUEUE}
  #       RABBITMQ_RESPONSE_QUEUE: ${RABBITMQ_RESPONSE_QUEUE}
  #     run: |
  #       # Uruchom testy integracyjne używając obrazów z ECR

  # push:
  #   name: Push images to AWS Elastic Container Registry
  #   # needs: integration-test
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Push Frontend Image to ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker load < frontend.tar
  #         docker tag frontend $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
  
  #     - name: Push Backend Image to ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker load < backend.tar
  #         docker tag backend $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
  
  #     - name: Push Calc Module Image to ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker load < calc_module.tar
  #         docker tag calc_module $ECR_REGISTRY/$ECR_REPOSITORY:calc-module-$IMAGE_TAG
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:calc-module-$IMAGE_TAG
      




