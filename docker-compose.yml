#############################################################################################################
#                                                                                                           #
# PRISMA_CLI_BINARY_TARGETS:                                                                                #
#   This configuration includes both the Alpine Linux target (for your GitHub tests)                        #
#   and the RHEL target (for AWS EKS). For local development, you typically don't need to set               #
#   PRISMA_CLI_BINARY_TARGETS because the native target in your schema.prisma file should cover             #
#   your local environment                                                                                  #
#                                                                                                           #
#   Budowanie wszystkich obrazów:                                                                           #
#     docker compose -f docker-compose.yml build --no-cache                                                 #
#                                                                                                           #
#   Budowanie części obrazów:                                                                               #
#     docker compose -f .\docker-compose.yml build --no-cache backend frontend calc_module                  #
#                                                                                                           #
#   Uruchamianie aplikacji:                                                                                 #
#     docker compose -f .\docker-compose.yml up                                                             #
#                                                                                                           #
#   Zatrzymywanie aplikacji i usuwanie kontenerów i sieci:                                                  #
#     docker compose -f .\docker-compose.yml down                                                           #
#                                                                                                           #
#   Samodzielne uruchamianie rabbita:                                                                       #
#     docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management                         #
#                                                                                                           #
#   UWAGA:                                                                                                  #
#     context obrazów musi być ustawiony na . co pozwoli na wczytywanie przy budowie zmienny z pliku        #
#     .env w głównym katalogu projektu a nie z katalogów poszczególnych modułów (centralizacja)             #
#############################################################################################################

networks:
  apt-network:
    driver: bridge

services:
  frontend:
    build:
      context: .
      dockerfile: ./frontend/frontend.${ENVIRONMENT}.Dockerfile
    image: air-pollution-tracker/${ENVIRONMENT}/frontend:latest
    ports:
      - "3000:3000"
    environment:
      - FAST_REFRESH=${FAST_REFRESH:-false}
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
    networks:
      - apt-network
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: ./backend/backend.${ENVIRONMENT}.Dockerfile
    image: air-pollution-tracker/${ENVIRONMENT}/backend:latest
    ports:
      - "9000:9000"
    environment:
      - PRISMA_CLI_BINARY_TARGETS=linux-musl-openssl-3.0.x,rhel-openssl-3.0.x
      - ORIGIN=${ORIGIN}
      - SECURE=${SECURE}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_KEY=${JWT_KEY}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://rabbitmq}
      - RABBITMQ_REQUEST_QUEUE=${RABBITMQ_REQUEST_QUEUE:-simulation_request_queue}
    networks:
      - apt-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  calc_module:
    build:
      context: .
      dockerfile: ./calc_module/calc_module.${ENVIRONMENT}.Dockerfile
    image: air-pollution-tracker/${ENVIRONMENT}/calc_module:latest
    environment:
      - RABBITMQ_REQUEST_QUEUE=${RABBITMQ_REQUEST_QUEUE:-simulation_request_queue}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://rabbitmq}
    networks:
      - apt-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - apt-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5